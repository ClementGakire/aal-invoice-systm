generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id         String         @id @default(cuid())
  name       String
  email      String         @unique
  role       Role           @default(CLIENT)
  department String?
  phone      String?
  isActive   Boolean        @default(true)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  invoices   Invoice[]
  jobs       LogisticsJob[]

  @@map("users")
}

model Client {
  id            String         @id @default(cuid())
  name          String
  email         String?
  phone         String?
  address       String?
  contactPerson String?
  tin           String?
  invoices      Invoice[]
  jobs          LogisticsJob[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("clients")
}

model Supplier {
  id       String    @id @default(cuid())
  name     String
  contact  String?
  expenses Expense[]

  @@map("suppliers")
}

model ServiceItem {
  id       String  @id @default(cuid())
  name     String
  price    Float
  currency String  @default("USD")
  vat      Boolean @default(false)

  @@map("service_items")
}

model LogisticsJob {
  id               String    @id @default(cuid())
  jobNumber        String    @unique
  title            String
  clientId         String
  status           JobStatus @default(OPEN)
  jobType          JobType
  portOfLoading    String
  portOfDischarge  String
  grossWeight      Float?
  chargeableWeight Float?
  shipper          String?
  consignee        String?
  package          String?
  goodDescription  String?
  plateNumber      String?
  containerNumber  String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  masterAirWaybill String?
  houseAirWaybill  String?
  masterBL         String?
  houseBL          String?
  userId           String?
  expenses         Expense[]
  invoices         Invoice[]
  client           Client    @relation(fields: [clientId], references: [id])
  user             User?     @relation(fields: [userId], references: [id])

  @@map("logistics_jobs")
}

model Invoice {
  id            String            @id @default(cuid())
  number        String            @unique
  clientId      String
  jobId         String?
  jobNumber     String?
  bookingNumber String?
  status        InvoiceStatus     @default(PENDING)
  invoiceDate   DateTime
  dueDate       DateTime?
  subTotal      Float
  total         Float
  currency      String            @default("USD")
  amountInWords String?
  remarks       String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  userId        String?
  lineItems     InvoiceLineItem[]
  client        Client            @relation(fields: [clientId], references: [id])
  job           LogisticsJob?     @relation(fields: [jobId], references: [id])
  user          User?             @relation(fields: [userId], references: [id])

  @@map("invoices")
}

model InvoiceLineItem {
  id            String  @id @default(cuid())
  invoiceId     String
  description   String
  basedOn       String
  rate          Float
  currency      String  @default("USD")
  amount        Float
  taxPercent    Float?
  taxAmount     Float?
  billingAmount Float
  invoice       Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_line_items")
}

model Expense {
  id           String        @id @default(cuid())
  title        String
  amount       Float
  currency     String        @default("USD")
  jobNumber    String?
  supplierId   String?
  supplierName String?
  jobId        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  job          LogisticsJob? @relation(fields: [jobId], references: [id])
  supplier     Supplier?     @relation(fields: [supplierId], references: [id])

  @@map("expenses")
}

enum Role {
  ADMIN
  FINANCE
  OPERATIONS
  CLIENT
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  DELIVERED
  CANCELLED
}

enum JobType {
  AIR_FREIGHT
  SEA_FREIGHT
  ROAD_FREIGHT
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  UNPAID
  OVERDUE
  CANCELLED
}
